//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


root Formata: {
    /**
     * Schema objects can "apply" themselves onto target objects.
     * Fields on this schema object with the "schema" attribute will be applied.
     *      - takes a vector/array of functions and additional schemas to apply to that field on the target object (in order).
     * If applying the field determins that the field is invalid, the field will be removed from the target object.
     * Otherwise, if the field is valid, the potentially modified field will be set on the target after all manipulation.
     *
     * To use:
     *  1. Create a Schema by applying #[schema([..])] attributes to the fields you care about.
     *  2. Make sure the schema object has this Schema type (cast using "as" or declare it as such).
     *  3. Call "apply" on the schema object, giving a target object to be modified/validated.
     *  4. The target object is now either valid (apply returns true) or invalid and missing failed/invalid fields.
     *
     * N.B: Because the schema will remove invalid fields, "bad" data will never be the result of applying this schema to a target.
     */
    type Schema {
        // Apply this schema to a target object.
        // Returns true if the target adheres to all #[schema([..])] field validations.
        // If invalid, fields that did not validate will be removed from target.
        fn apply(target: obj = self): bool {
            let valid = true;
            for (field in self.keys()) {
                if (!self.apply_field(target, field)) {
                    valid = false;
                    target.removeField(field, true);
                }
            }
            return valid;
        }

        // Apply this schema field onto the target's field.
        // Gets the #[schema([..])] attribute from this schema's field, applying those validations on the corresponding target field.
        fn apply_field(target: obj, field: str): bool {
            let schema_field_attributes = self.attributes(field).or(map());
            let schema_value = schema_field_attributes.get('schema');
            switch (typeof schema_value) {
                case 'null': {
                    return true; // empty schema accepts all
                }
                case 'obj': {
                    try {
                        return schema_value.apply_field(target, field);
                    } catch {
                        return false;
                    }
                }
                case 'fn': {
                    let value = box(target.at(field));
                    let params = schema_value.parameters();
                    let plen = params.len();
                    let rtype = schema_value.returnType();
                    let res = null;
                    if (rtype == 'bool') {
                        if (plen == 4) {
                            // (target: obj, schema: obj, field: str, value: Box<unknown>): bool
                            res = schema_value.call(target, self, field, value);
                        } else if (plen == 3) {
                            // (target: obj, field: str, value: Box<unknown>): bool
                            res = schema_value.call(target, field, value);
                        } else if (plen == 2) {
                            // (target: obj, value: Box<unknown>): bool
                            res = schema_value.call(target, value);
                        } else if (plen == 1) {
                            // (value: Box<unknown>): bool
                            res = schema_value.call(value);
                        } else {
                            // (): bool
                            res = schema_value.call();
                        }
                        if (!res) return false;
                    } else if (rtype != 'void') {
                        if (plen == 4) {
                            // (target: obj, schema: obj, field: str, value: Box<unknown>): unknown
                            res = schema_value.call(target, self, field, value);
                        } else if (plen == 3) {
                            // (target: obj, field: str, value: Box<unknown>): unknown
                            res = schema_value.call(target, field, value);
                        } else if (plen == 2) {
                            // (target: obj, value: Box<unknown>): unknown
                            res = schema_value.call(target, value);
                        } else if (plen == 1) {
                            // (value: Box<unknown>): unknown
                            res = schema_value.call(value);
                        } else {
                            // (): unknown
                            res = schema_value.call();
                        }
                        if (res != null) value = res;
                    }
                    if (value != null) target.set(field, value);
                    return true;
                }
                case 'vec': {
                    let value = box(target.at(field));
                    for (entry in schema_value) {
                        switch (typeof entry) {
                            case 'fn': {
                                let params = entry.parameters();
                                let plen = params.len();
                                let rtype = entry.returnType();
                                let res = null;
                                if (rtype == 'bool') {
                                    if (plen == 4) {
                                        // (target: obj, schema: obj, field: str, value: Box<unknown>): bool
                                        res = entry.call(target, self, field, value);
                                    } else if (plen == 3) {
                                        // (target: obj, field: str, value: Box<unknown>): bool
                                        res = entry.call(target, field, value);
                                    } else if (plen == 2) {
                                        // (target: obj, value: Box<unknown>): bool
                                        res = entry.call(target, value);
                                    } else if (plen == 1) {
                                        // (value: Box<unknown>): bool
                                        res = entry.call(value);
                                    } else {
                                        // (): bool
                                        res = entry.call();
                                    }
                                    if (!res) return false;
                                } else if (rtype != 'void') {
                                    if (plen == 4) {
                                        // (target: obj, schema: obj, field: str, value: Box<unknown>): unknown
                                        res = entry.call(target, self, field, value);
                                    } else if (plen == 3) {
                                        // (target: obj, field: str, value: Box<unknown>): unknown
                                        res = entry.call(target, field, value);
                                    } else if (plen == 2) {
                                        // (target: obj, value: Box<unknown>): unknown
                                        res = entry.call(target, value);
                                    } else if (plen == 1) {
                                        // (value: Box<unknown>): unknown
                                        res = entry.call(value);
                                    } else {
                                        // (): unknown
                                        res = entry.call();
                                    }
                                    if (res != null) value = res;
                                }
                            }
                            case 'obj': {
                                try {
                                    let res = entry.apply_field(target, field);
                                    if (res) {
                                        value = target.at(field);
                                    } else {
                                        return false;
                                    }
                                } catch {
                                    return false;
                                }
                            }
                        }
                    }
                    if (value != null) target.set(field, value);
                    return true;
                }
                default: {
                    return false;
                }
            }
        }
    }


    /**
     * Helper functions for validating fields.
     * Functions found in these interfaces are meant to be used with the #[schema([..])] attribute, creating schemas that can
     * be applied to target objects, controlling their fields in every way possible.
     */
    Schema: {
        Type: {
            // Null type validation function.
            // This ensures the value didn't exist in the target.
            fn null(value: unknown): bool {
                return value == null;
            }

            // String type validation functions.
            // False if this value is not a string.
            // Can also act as a 'required' check.
            fn str(value: unknown): bool {
                return isString(value);
            }
            fn optStr(value: unknown): bool {
                return value == null || isString(value);
            }

            // Number type validation functions.
            // False if this value is not a number (float, int, units).
            // Can also act as a 'required' check.
            fn number(value: unknown): bool {
                return isNumber(value);
            }
            fn optNumber(value: unknown): bool {
                return value == null || isNumber(value);
            }

            // Integer type validation functions.
            // False if this value is not an int.
            // Can also act as a 'required' check.
            fn int(value: unknown): bool {
                return (typename value) == "int";
            }
            fn optInt(value: unknown): bool {
                return value == null || (typename value) == "int";
            }

            // Float type validation functions.
            // False if this value is not a float (or units).
            // Can also act as a 'required' check.
            fn float(value: unknown): bool {
                if (isNumber(value)) {
                    return Number.hasUnits(value) || (typename value) == "float";
                }
                return false;
            }
            fn optFloat(value: unknown): bool {
                if (value == null) return true;
                if (isNumber(value)) {
                    return Number.hasUnits(value) || (typename value) == "float";
                }
                return false;
            }

            // Units type validation functions.
            // False if this value is not a number with units.
            // Can also act as a 'required' check.
            fn units(value: unknown): bool {
                return isNumber(value) && Number.hasUnits(value);
            }
            fn optUnits(value: unknown): bool {
                if (value == null) return value;
                return isNumber(value) && Number.hasUnits(value);
            }

            // Angle units type validation functions.
            // False if this value is not a number with Angle units.
            // Can also act as a 'required' check.
            fn angle(value: unknown): bool {
                return isNumber(value) && Number.isAngle(value);
            }
            fn optAngle(value: unknown): bool {
                if (value == null) return value;
                return isNumber(value) && Number.isAngle(value);
            }

            // Temperature units type validation functions.
            // False if this value is not a number with Temperature units.
            // Can also act as a 'required' check.
            fn temp(value: unknown): bool {
                return isNumber(value) && Number.isTemperature(value);
            }
            fn optTemp(value: unknown): bool {
                if (value == null) return value;
                return isNumber(value) && Number.isTemperature(value);
            }

            // Length units type validation functions.
            // False if this value is not a number with Length units.
            // Can also act as a 'required' check.
            fn length(value: unknown): bool {
                return isNumber(value) && Number.isLength(value);
            }
            fn optLength(value: unknown): bool {
                if (value == null) return value;
                return isNumber(value) && Number.isLength(value);
            }

            // Time units type validation functions.
            // False if this value is not a number with Time units.
            // Can also act as a 'required' check.
            fn time(value: unknown): bool {
                return isNumber(value) && Number.isTime(value);
            }
            fn optTime(value: unknown): bool {
                if (value == null) return value;
                return isNumber(value) && Number.isTime(value);
            }

            // Mass units type validation functions.
            // False if this value is not a number with Mass units.
            // Can also act as a 'required' check.
            fn mass(value: unknown): bool {
                return isNumber(value) && Number.isMass(value);
            }
            fn optMass(value: unknown): bool {
                if (value == null) return value;
                return isNumber(value) && Number.isMass(value);
            }

            // Object type validation functions.
            // False if this value is not an object.
            // Can also act as a 'required' check.
            fn obj(value: unknown): bool {
                return isObject(value);
            }
            fn optObj(value: unknown): bool {
                return value == null || isObject(value);
            }

            // Boolean type validation functions.
            // False if this value is not a bool.
            // Can also act as a 'required' check.
            fn bool(value: unknown): bool {
                return isBool(value);
            }
            fn optBool(value: unknown): bool {
                return value == null || isBool(value);
            }

            // Map type validation functions.
            // False if this value is not a map.
            // Can also act as a 'required' check.
            fn map(value: unknown): bool {
                return isMap(value);
            }
            fn optMap(value: unknown): bool {
                return value == null || isMap(value);
            }

            // Set type validation functions.
            // False if this value is not a set.
            // Can also act as a 'required' check.
            fn set(value: unknown): bool {
                return isSet(value);
            }
            fn optSet(value: unknown): bool {
                return value == null || isSet(value);
            }

            // Blob type validation functions.
            // False if this value is not a blob.
            // Can also act as a 'required' check.
            fn blob(value: unknown): bool {
                return isBlob(value);
            }
            fn optBlob(value: unknown): bool {
                return value == null || isBlob(value);
            }

            // Array/Vec type validation functions.
            // False if this value is not an array.
            // Can also act as a 'required' check.
            fn array(value: unknown): bool {
                return isArray(value);
            }
            fn optArray(value: unknown): bool {
                return value == null || isArray(value);
            }

            // Function type validation functions.
            // False if this value is not a function.
            // Can also act as a 'required' check.
            fn func(value: unknown): bool {
                return isFunc(value);
            }
            fn optFunc(value: unknown): bool {
                return value == null || isFunc(value);
            }
        }

        // Required value Schema helper function.
        // Can be used directly to require the value to be non-null.
        fn required(value: Box<unknown>): bool {
            return value != null;
        }

        // Use the schema's value as the default value if one isn't provided by the target.
        fn default(target: obj, schema: obj, field: str, value: Box<unknown>): unknown {
            if (value == null) return schema.at(field);
            return value;
        }

        // Delete the value if present.
        fn delete(target: obj, field: str, value: Box<unknown>): unknown {
            if (value != null) {
                target.removeField(field, true);
                value = null; // need this as the value won't be set otherwise
            }
            return null;
        }

        // Search for alternative field(s) on the target if the value doesn't exist.
        // Doesn't do anything if existing value exists!
        // Does not render the schema invalid if nothing is found! (use the 'required' function after search if desired).
        // Cannot be used directly, must be wrapped in another function.
        // Ex. (target: obj, value: unknown): unknown => Formata.Schema.search(target, self, 'other', value)
        fn search(target: obj, schema: obj, others: unknown, existing: unknown, up: bool = true, parent_down: bool = true): unknown {
            if (existing == null) {
                switch (typeof others) {
                    case 'str': {
                        try {
                            let search = null;
                            if (up && down) search = target.search(others, parent_down, [schema]);
                            else if (up) search = target.searchUp(others, parent_down, [schema]);
                            else search = target.searchDown(others, 0, [schema]);
                            if (search) return search.at(0);
                        } catch {
                            // nada...
                        }
                    }
                    case 'set' |
                    case 'vec': {
                        try {
                            let search = null;
                            for (other in others) {
                                if (up && down) search = target.search(other, parent_down, [schema]);
                                else if (up) search = target.searchUp(other, parent_down, [schema]);
                                else search = target.searchDown(other, 0, [schema]);
                                if (search) return search.at(0);
                            }
                        } catch {
                            // nada...
                        }
                    }
                }
            }
            return existing;
        }
    }
}
