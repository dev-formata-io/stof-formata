//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import 'schema';


Schema resource: {
    #[schema([
        (target: obj, value: unknown): unknown =>
            Formata.Schema.search(target, self, 'resourceType', value),
        Formata.Schema.required,
    ])]
    type: ''

    #[schema([Formata.Schema.delete])]
    undesired: ''

    #[schema([
        Formata.Schema.default,
        Formata.Schema.Type.str,
    ])] // required & string type
    id: 'unknown'

    #[schema([(active: bool): bool => active != null])]
    active: true

    Schema name_schema: {
        #[schema([
            (use: str): bool => use != null && set('official', 'usual', 'maiden').contains(use),
        ])]
        use: 'usual'

        
        family: ''

        #[schema([(given_names: vec): bool => {
            for (name in given_names) if ((typename name) != 'str') return false;
            return true;
        }])]
        given: []
    }

    #[schema([(names: vec): bool => {
        let valid = true;
        let schema = self.name_schema;
        for (name in names) if (!schema.apply(name)) {
            valid = false;
            break;
        }
        return valid;
    }])]
    name: []
}

record: {
    resourceType : "Patient",
    //id : "example",
    undesired: 'WOHOOO'
    active : true,
    name : [
        {
            use : "official",
            family : "Chalmers",
            given : ["Peter", "James"]
        },
        {
            use : "usual",
            given : ["Jim"]
        },
        {
            use : "maiden",
            family : "Windsor",
            given : ["Peter", "James"],
            period : {
                end : "2002"
            }
        }
    ]
}

#[test]
fn test() {
    let valid = self.resource.apply(self.record);
    pln(stringify(self.record, 'toml'));
    assert(valid);
}
