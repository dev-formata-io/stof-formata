//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

Schema resource: {
    #[required]
    #[typeof('str')]
    #[search(vec('resourceType'))]
    #[order(vec('search', 'required', 'typeof'))] // search first
    type: ''

    #[required]
    #[typeof('str')]
    id: ''

    #[required]
    active: true

    #[ignore]
    Schema name_schema: {
        #[required]
        #[validate(set('official', 'usual', 'maiden'))]
        use: 'usual'

        #[optional]
        family: ''

        #[expand]
        #[validate((name: unknown): bool => (typename name) == 'str')]
        given: []
    }

    //#[schema(self.name_schema)]
    #[validate((value: vec): bool => {
        let valid = true;
        let schema = self.name_schema;
        for (name in value) {
            if (!schema.apply(name)) {
                valid = false;
                break;
            }
        }
        return valid;
    })]
    //#[expand]
    name: []
}

record: {
    resourceType : "Patient",
    id : "example",
    active : true,
    name : [
        {
            use : "official",
            family : "Chalmers",
            given : ["Peter", "James"]
        },
        {
            use : "usual",
            given : ["Jim"]
        },
        {
            use : "maiden",
            family : "Windsor",
            given : ["Peter", "James"],
            period : {
                end : "2002"
            }
        }
    ]
}

#[test]
fn test() {
    let valid = self.resource.apply(self.record);
    //pln(self.record);
    assert(valid);
}
