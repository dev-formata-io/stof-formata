//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


Schema optional_search_schema: {
    #[optionalSearch]
    #[search('down')]
    optional: ''
}
#[test]
fn optional_search() {
    let target = new {};
    assert(self.optional_search_schema.apply(target));
    assertNull(target.optional);
}


Schema search_schema: {
    #[search('down')]
    field: 'field';
}
search_target: {
    sub_obj: {
        a: {
            field: 'blah_search'
        }
    }
}
#[test]
fn search() {
    assert(self.search_schema.apply(self.search_target));
    assertEq(self.search_target.field, 'blah_search');
}


Schema search_names_schema: {
    // vec works too, but need to specify strategy of 'down' for test cases to not collide.
    #[search(map([('othername', 'down'), ('otherfield', 'down'), ('cando', 'down')]))]
    field: 'field';
}
names_target: {
    sub_obj: {
        a: {
            otherfield: 'dude'
        }
    }
}
fail_names_target: {
    sub_obj: {
        a: {
            other: 'man'
        }
    }
}
#[test]
fn other_names_search() {
    assert(self.search_names_schema.apply(self.names_target));
    assertEq(self.names_target.field, 'dude');

    assertNot(self.search_names_schema.apply(self.fail_names_target));
    assertNull(self.fail_names_target.field);
}
