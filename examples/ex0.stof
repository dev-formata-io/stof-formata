//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import 'task';
import 'schema';
import 'http';


// Schemafy is a Task that applies a Schema to a 'reply' object in the 'run' function.
Schemafy main: {
    // Makes an HTTP call to the restcountries API and puts the reply in the 'reply' object
    // passed to this tasks 'run' function.
    Http.Call usa: {
        request: {
            url: 'https://restcountries.com/v3.1/name/usa'
        }
    }

    // After executing all tasks, this Schemafy task will use this object as the schema
    // for the 'reply' object passed to this tasks 'run' function.
    Schema schema: {
        // Apply the country schema to every object in this array
        #[schema([(countries: Box<vec>): bool => {
            let valid = true;
            let schema = self.country;
            for (country in countries) {
                if (!schema.apply(country)) {
                    valid = false;
                    break;
                }
            }
            return valid;
        }])]
        field: []

        Schema country: {
            // Keep alternate spellings that are greater than 2 letters only
            #[schema([(spellings: Box<vec>): bool => {
                // filter out values that are less than 2 letters
                spellings.retain((entry: str): bool => entry.len() > 2);
                return true;
            }])]
            altSpellings: []

            #[schema([
                Schema.default,       // use 0 if no area provided
                Schema.Type.number,   // make sure it's a number if provided
                (number: unknown): bool => number >= 0, // make sure the number is positive
            ])]
            area: 0

            // Delete all of these fields
            #[schema(Schema.delete)] cca2: ''
            #[schema(Schema.delete)] cca3: ''
            #[schema(Schema.delete)] ccn3: ''
            #[schema(Schema.delete)] cioc: ''
            #[schema(Schema.delete)] flag: ''
            #[schema(Schema.delete)] subregion: ''
            #[schema(Schema.delete)] status: ''
            #[schema(Schema.delete)] startOfWeek: ''
            #[schema(Schema.delete)] region: ''
            #[schema(Schema.delete)] landlocked: false
            #[schema(Schema.delete)] timezones: []
            #[schema(Schema.delete)] tld: []
            #[schema(Schema.delete)] unMember: true
            #[schema(Schema.delete)] coatOfArms: {}
            #[schema(Schema.delete)] demonyms: {}
            #[schema(Schema.delete)] car: {}
            #[schema(Schema.delete)] currencies: {}
            #[schema(Schema.delete)] flags: {}
            #[schema(Schema.delete)] gini: {}
            #[schema(Schema.delete)] idd: {}
            #[schema(Schema.delete)] postalCode: {}
            #[schema(Schema.delete)] translations: {}
        }
    }
}


#[main]
fn main() {
    let reply = new {};
    self.main.run(reply);
    pln(self.main.valid);
    pln(stringify(reply, 'toml'));
}
